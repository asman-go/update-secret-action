name: Create or update a Github variable or secret
description: Create or update a Github variable or secret
author: murami.ike@gmail.com
inputs:
  key:
    description: a key of a created or updated secret / variable in Github
    required: true
  value:
    description: a new value for a secret or variable
    required: true
  level:
    description: Where save a secret â€” in a repository or organization
    required: false
    default: repository  # organization or repository
  token:
    description: Token with permission to create secrets in an organization or repository.
    required: true
  type:
    description: It is a variable or secret
    required: false
    default: secret  # secret or variable
  visibility:
    description: Visibility level for organization's secrets
    required: false
    default: private
runs:
  using: 'composite'
  steps:

    - uses: actions/setup-node@v3
      with:
        node-version: 20

    - shell: bash
      run: |
        npm install --global sodium-native
        echo "NODE_PATH=$(npm root -g)" >> $GITHUB_ENV
    
    - name: Update a secret value for a repository
      uses: actions/github-script@v7
      env:
        SECRET_KEY: ${{ inputs.key }}
        SECRET_VALUE: ${{ inputs.value }}
      with:
        result-encoding: string
        github-token: ${{ inputs.token }}
        script: |
            const sodium = require('sodium-native');
            const { data: {key: publicKey, key_id: keyId} } = await github.rest.actions.getRepoPublicKey({...context.repo});
            if (publicKey) {
              const key = Buffer.from(publicKey, 'base64');
              const message = Buffer.from(process.env.SECRET_VALUE);
              const ciphertext = Buffer.alloc(message.length + sodium.crypto_box_SEALBYTES);

              sodium.crypto_box_seal(ciphertext, message, key);
              const encryptedToken = ciphertext.toString('base64');

              await github.rest.actions.createOrUpdateRepoSecret({
                ...context.repo, 
                secret_name: process.env.SECRET_KEY,
                encrypted_value: encryptedToken,
                key_id: keyId,
              });
            } else {
              core.error('Failed to fetch the public key. Unable to update secret');
            }
