name: Create or update a Github variable or secret
description: Create or update a Github variable or secret
author: murami.ike@gmail.com
inputs:
  key:
    description: a key of a created or updated secret / variable in Github
    required: true
  value:
    description: a new value for a secret or variable
    required: true
  level:
    description: Where save a secret â€” in a repository or organization
    required: false
    default: repository  # organization or repository
  token:
    description: Token with permission to create secrets in an organization or repository.
    required: true
  type:
    description: It is a variable or secret
    required: false
    default: secret  # secret or variable
  visibility:
    description: Visibility level for organization's secrets
    required: false
    default: private
runs:
  using: 'composite'
  steps:

    - uses: actions/setup-node@v3
      with:
        node-version: 20

    - shell: bash
      run: |
        npm install --global sodium-native
        echo "NODE_PATH=$(npm root -g)" >> $GITHUB_ENV

    - name: Create a variable value for a organization or repository
      if: ${{ inputs.type == 'variable' }}
      uses: actions/github-script@v7
      env:
        VARIABLE_KEY: ${{ inputs.key }}
        VARIABLE_VALUE: ${{ inputs.value }}
        LEVEL: ${{ inputs.level }}
        VISIBILITY: ${{ inputs.visibility }}
      with:
        result-encoding: string
        github-token: ${{ inputs.token }}
        script: |
          const sodium = require('sodium-native');

          let requestParameters
          let additionalParameters

          let getVariable
          let createVariable
          let updateVariable
          let createOrUpdateVariable

          if (process.env.LEVEL === "organization") {
              requestParameters = {
                org: context.repo.owner
              }
              additionalParameters = {
                visibility: process.env.VISIBILITY
              }

              getVariable = github.rest.actions[`getOrgVariable`]
              createVariable = github.rest.actions[`createOrgVariable`]
              updateVariable = github.rest.actions[`updateOrgVariable`]
          }
          if (process.env.LEVEL === "repository") {
              requestParameters = {
                ...context.repo
              }
              additionalParameters = {}

              getVariable = github.rest.actions[`getRepoVariable`]
              createVariable = github.rest.actions[`createRepoVariable`]
              updateVariable = github.rest.actions[`updateRepoVariable`]
          }

          let resp = {}

          try {
            resp = await getVariable({
              ...requestParameters,
              name: process.env.VARIABLE_KEY
            })
          }
          catch (error) {
          
          }

          if (resp && resp.data && 'name' in resp.data) {
            // Update variable
            createOrUpdateVariable = updateVariable
          }
          else {
            // Create new variable
            createOrUpdateVariable = createVariable
          }

          await createOrUpdateVariable({
            ...requestParameters,
            ...additionalParameters,
            name: process.env.VARIABLE_KEY,
            value: process.env.VARIABLE_VALUE
          });


    - name: Create or update a secret value for a organization or repository
      if: ${{ inputs.type == 'secret' }}
      uses: actions/github-script@v7
      env:
        SECRET_KEY: ${{ inputs.key }}
        SECRET_VALUE: ${{ inputs.value }}
        LEVEL: ${{ inputs.level }}
        VISIBILITY: ${{ inputs.visibility }}
      with:
        result-encoding: string
        github-token: ${{ inputs.token }}
        script: |
          const sodium = require('sodium-native');

          // Parameters
          let publicKeyRequestParameters
          let createOrUpdateRequestParameters

          // Functions
          let getPublicKey
          let createOrUpdateSecret

          if (process.env.LEVEL === "organization") {
              publicKeyRequestParameters = {org: context.repo.owner}
              createOrUpdateRequestParameters = {visibility: process.env.VISIBILITY}

              getPublicKey = github.rest.actions[`getOrgPublicKey`]
              createOrUpdateSecret = github.rest.actions[`createOrUpdateOrgSecret`]
          }
          if (process.env.LEVEL === "repository") {
              publicKeyRequestParameters = {...context.repo}
              createOrUpdateRequestParameters = {}

              getPublicKey = github.rest.actions[`getRepoPublicKey`]
              createOrUpdateSecret = github.rest.actions[`createOrUpdateRepoSecret`]
          }

          const { data: {key: publicKey, key_id: keyId} } = await getPublicKey(publicKeyRequestParameters);
          if (publicKey) {
            const key = Buffer.from(publicKey, 'base64');
            const message = Buffer.from(process.env.SECRET_VALUE);
            const ciphertext = Buffer.alloc(message.length + sodium.crypto_box_SEALBYTES);

            sodium.crypto_box_seal(ciphertext, message, key);
            const encryptedToken = ciphertext.toString('base64');

            await createOrUpdateSecret({
              ...publicKeyRequestParameters, 
              secret_name: process.env.SECRET_KEY,
              encrypted_value: encryptedToken,
              key_id: keyId,
              ...createOrUpdateRequestParameters
            });
          } else {
            core.error('Failed to fetch the public key. Unable to update secret');
          }
